//url shortener service db schema
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  name             String
  role             Role      @default(USER)
  password         String?
  refreshToken     String?   @unique
  refreshTokenExp  DateTime?
  profilePicture   String?
  isActive         Boolean   @default(true)
  emailVerified    Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  urls           Url[]
  clicks         Click[]
  subscriptions  Subscription[]
  paymentHistory PaymentHistory[]
  UsageHistory   UsageHistory[]
  FeatureUsage   FeatureUsage[]
  Notification   Notification[]

  @@index([email])
  @@index([isActive])
  @@map("users")
}

model Url {
  id           String    @id @default(uuid())
  originalUrl  String
  slug         String    @unique
  title        String?
  qrCode       String?
  description  String?
  userId       String?
  isActive     Boolean   @default(true)
  expiresAt    DateTime?
  password     String?
  customDomain String?
  clickLimit   Int?
  totalClicks  Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  clicks    Click[]
  analytics Analytics[]

  @@index([slug])
  @@index([userId])
  @@index([isActive])
  @@index([expiresAt])
  @@index([createdAt])
  @@map("urls")
}

model Click {
  id        String   @id @default(uuid())
  urlId     String
  userId    String?
  ipAddress String?
  userAgent String?
  referer   String?
  country   String?
  city      String?
  device    String?
  browser   String?
  os        String?
  clickedAt DateTime @default(now())

  url  Url   @relation(fields: [urlId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([urlId])
  @@index([userId])
  @@index([clickedAt])
  @@index([country])
  @@map("clicks")
}

model Analytics {
  id           String   @id @default(uuid())
  urlId        String
  date         DateTime @db.Date
  clickCount   Int      @default(0)
  uniqueClicks Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  url Url @relation(fields: [urlId], references: [id], onDelete: Cascade)

  @@unique([urlId, date])
  @@index([urlId])
  @@index([date])
  @@map("analytics")
}

model Plan {
  id              String       @id @default(uuid())
  name            String       @unique
  description     String
  type            PlanType     @default(FREE)
  price           Float        @default(0)
  currency        Currency     @default(BDT)
  interval        PlanInterval
  isActive        Boolean      @default(true)
  sortOrder       Int          @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  subscriptions Subscription[]
  PlanFeature   PlanFeature[]
  UsageHistory  UsageHistory[]

  @@index([isActive])
  @@map("plans")
}

model PlanFeature {
  id        String   @id @default(uuid())
  planId    String
  key       String // e.g., "MAX_URLS", "CUSTOM_DOMAINS"
  value     String // e.g., "100", "true"
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([planId, key])
  @@index([planId])
  @@index([key])
  @@map("plan_features")
}

model UsageHistory {
  id          String   @id @default(uuid())
  userId      String
  planId      String
  description String
  usedAt      DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([planId])
  @@map("usage_history")
}

model FeatureUsage {
  id             String   @id @default(uuid())
  userId         String
  subscriptionId String
  featureKey     String // e.g. "MAX_URLS"
  used           Int      @default(0) // current usage count
  periodStart    DateTime
  periodEnd      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([userId, subscriptionId, featureKey, periodStart, periodEnd])
  @@index([userId])
  @@index([subscriptionId])
  @@index([featureKey])
  @@index([periodEnd])
  @@map("feature_usage")
}

model Subscription {
  id                   String             @id @default(uuid())
  userId               String
  planId               String
  status               SubscriptionStatus @default(INACTIVE)
  paymentMethod        PaymentMethod      @default(BKASH)
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  canceledAt           DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan           Plan             @relation(fields: [planId], references: [id], onDelete: Restrict)
  paymentHistory PaymentHistory[]
  FeatureUsage   FeatureUsage[]

  @@index([userId])
  @@index([planId])
  @@index([status])
  @@index([currentPeriodEnd])
  @@map("subscriptions")
}

model PaymentHistory {
  id              String        @id @default(uuid())
  userId          String
  subscriptionId  String?
  bkashPaymentId  String?       @unique
  amount          Float
  currency        Currency      @default(BDT)
  status          PaymentStatus @default(PENDING)
  description     String?
  paymentMethod   PaymentMethod @default(BKASH)
  failureReason   String?
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([subscriptionId])
  @@index([status])
  @@index([bkashPaymentId])
  @@index([paidAt])
  @@map("payment_history")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType @default(INFO)
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notifications")
}

enum PlanType {
  FREE
  PAID
}

enum NotificationType {
  INFO
  WARNING
  ERROR
}

enum Role {
  USER
  ADMIN
}

enum PlanInterval {
  MONTH
  YEAR
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  PAUSED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED
}

enum Currency {
  BDT
}

enum PaymentMethod {
  BKASH
}
